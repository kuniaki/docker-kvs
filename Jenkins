import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable
import hudson.tasks.junit.CaseResult
import hudson.util.DescribableList
import hudson.slaves.EnvironmentVariablesNodeProperty
import jenkins.model.Jenkins

properties(
    [
        parameters([
          string(name: 'branch', defaultValue: 'main', description: 'branch', ), string(name: 'node', defaultValue: 'DockerTest12', description: 'Jenkins Node Name', ),
          string(name: 'production', defaultValue: '192.168.11.35', description: 'Production', ),
        ])
    ]
)

node(node) {

  try {

    stage('init') {
       sh '''
       git config --global user.name kuniaki
       git config --global user.email kuniaki.kudo@gmail.com
       '''

     //Clean up WORKSPACE
     step([$class: 'WsCleanup'])
    }

    stage('Checkout') {
       checkout scm: [
           $class: 'GitSCM', 
           extensions: [[$class: 'WipeWorkspace'],
                        [$class: 'CloneOption',
                         depth: 0,
                         honorRefspec: true,
                         noTags: false,
                         reference: '',
                          shallow: false]],
           userRemoteConfigs: [[url: 'https://github.com/kuniaki/docker-kvs.git',
                               refspec: '',
                               credentialsId: 'eaea2108-e081-44a2-8adf-98d7e32f43e8']],
                               branches: [[name: branch]]], poll: false
    }

    stage('Build') {
        sh "cat docker-compose.build.yml"
        sh "docker-compose -f docker-compose.build.yml down"
        sh "docker volume prune -f"
        sh "docker-compose -f docker-compose.build.yml build"
        sh "docker-compose -f docker-compose.build.yml up -d"
        sh "docker-compose -f docker-compose.build.yml ps"
    }

    stage('Test') {

     sh "docker container exec dockerkvs_apptest pytest --junitxml=apptest.xml"
      sh "docker cp dockerkvs_apptest:/src/apptest.xml ."
      junit 'apptest.xml'

      sh "docker container exec dockerkvs_webtest pytest --junitxml=uitest.xml"
      sh "docker cp dockerkvs_webtest:/src/uitest.xml ."
      junit 'uitest.xml'
      
     stopContainer() 
    }
    
   def now = new Date()
   println now.format("yyMMdd.HHmm", TimeZone.getTimeZone('UTC'))
   def TIME_STAMP = now.format("yyMMdd.HHmm", TimeZone.getTimeZone('UTC'))
   
   stage('Register') {
      withCredentials([usernamePassword(credentialsId: '5e570ab5-17cb-4740-8393-547b1200e31f', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) { 
        sh 'docker login -u $USERNAME -p $PASSWORD'
        sh "docker tag dockerkvs_web $USERNAME/web:$TIME_STAMP"
        sh "docker tag dockerkvs_app $USERNAME/app:$TIME_STAMP"
        sh "docker push $USERNAME/web:$TIME_STAMP"
        sh "docker push $USERNAME/app:$TIME_STAMP"
        sh "docker logout"
      }
    }

    stage('clear') {
     deleteImages() 
   }

   stage('Deploy') {
      withCredentials([usernamePassword(credentialsId: '5e570ab5-17cb-4740-8393-547b1200e31f', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) { 
        sh 'docker login -u $USERNAME -p $PASSWORD'
        sh "cat docker-compose.prod.yml"
        sh "echo 'DOCKERHUB_USER=$USERNAME' > .env"
        sh "echo 'BUILD_TIMESTAMP=$TIME_STAMP' >> .env"
        sh "cat .env"
        sh "docker-compose -H ssh://root@$production -f docker-compose.prod.yml up -d"
        sh "docker-compose -H ssh://root@$production -f docker-compose.prod.yml ps"
         sh "docker logout"
      }
    }


  } catch(e) {
     stopContainer() 
     deleteImages() 
  }
}

def stopContainer() {
    sh "docker-compose -f docker-compose.build.yml down"
}

def deleteImages() {
withCredentials([usernamePassword(credentialsId: '5e570ab5-17cb-4740-8393-547b1200e31f', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
    sh "docker rmi $USERNAME/web:$TIME_STAMP"
    sh "docker rmi $USERNAME/app:$TIME_STAMP"
    sh "docker rmi `docker images -q`"
  }
}

